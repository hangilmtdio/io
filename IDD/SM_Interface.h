#pragma once

#include "stdafx.h"


typedef enum SYS_ERR
{
	/* NONE (1) */
	NONE = 0,

	/* SYSTEM (2) */
	ERR_CREATE_LOG_FILE = 1,
	ERR_WRITE_LOG_FILE = 2,

	/* NETWORK (16) */
	ERR_RECEIVE_SOCKET = 3,
	ERR_HOST_RECEIVE_SOCKET = 4,
	ERR_DSP_RECEIVE_SOCKET = 5,
	ERR_PNL1_RECEIVE_SOCKET = 6,
	ERR_PNL2_RECEIVE_SOCKET = 7,
	ERR_MM_RECEIVE_SOCKET = 8,
	ERR_IO_RECEIVE_SOCKET = 9,
	ERR_ACS_RECEIVE_SOCKET = 10,
	ERR_MPD_RECEIVE_SOCKET = 11,
	ERR_HUD_RECEIVE_SOCKET = 12,
	ERR_EMD_RECEIVE_SOCKET = 13,
	ERR_EHPD_RECEIVE_SOCKET = 14,
	ERR_CEBI_RECEIVE_SOCKET = 15,
	ERR_FQI_RECEIVE_SOCKET = 16,
	ERR_LANDING_GEAR_SOCKET = 17,
	ERR_COM_SOCKET = 18,

	/* DATABASE (7) */
	ERR_SEND_SOCKET = 19,
	ERR_OPEN_DATABASE = 20,
	ERR_LD_VAR_DATA = 21,
	ERR_LD_TASK_DATA = 22,
	ERR_LD_INIT_DATA = 23,
	ERR_LD_STEP_DATA = 24,
	ERR_UP_SKIP_DATA = 25,

	/* DEVICE (8) */
	ERR_BOOTING = 26,
	ERR_MOUSE_CONNECTION = 27,
	ERR_MONITOR = 28,
	ERR_SOUND_DEVICE = 29,
	ERR_KEYBOARD = 30,
	ERR_VIDEO_CONTROLLER = 31,
	ERR_CDROM = 32,
	ERR_IDE_CONTRLLER = 33,

	/* RESOLUTION (12) */
	ERR_DISPLAY_RESOLUTION = 34,
	ERR_PNL1_RESOLUTION = 35,
	ERR_PNL2_RESOLUTION = 36,
	ERR_MM_RESOLUTION = 37,
	ERR_GRAPHIC_RESOLUTION = 38,
	ERR_GRAPHIC_SMFD_L_RESOLUTION = 39,
	ERR_GRAPHIC_SMFD_R_RESOLUTION = 40,
	ERR_GRAPHIC_EFI_TOP_RESOLUTION = 41,
	ERR_GRAPHIC_EFI_MID_RESOLUTION = 42,
	ERR_GRAPHIC_EFI_BTM_RESOLUTION = 43,
	ERR_GRAPHIC_HUD_RESOLUTION = 44,
	ERR_GRAPHIC_RESERVED = 45,

	/* I/O BOARD (6) */
	ERR_DISCRETE_INPUT_CARD1 = 46,
	ERR_DISCRETE_INPUT_CARD2 = 47,
	ERR_DISCRETE_OUTPUT_CARD1 = 48,
	ERR_DISCRETE_OUTPUT_CARD2 = 49,
	ERR_ANALOG_INPUT_CARD1 = 50,
	ERR_SERIAL_CARD1 = 51,

	/* RS (7) */
	ERR_RS_OPEN_SMFD_L = 52,
	ERR_RS_OPEN_SMFD_R = 53,
	ERR_RS_OPEN_HUD = 54,
	ERR_RS_OPEN_EFI = 55,
	ERR_RS_OPEN_EHPD = 56,
	ERR_RS_OPEN_CEBI = 57,
	ERR_RS_OPEN_FQI = 58,

	/* HOST code (5) */
	ERR_SM_IOS_RECV_SOCKET = 59,
	ERR_LOAD_WS_LIB = 60,
	ERR_CREATE_SOCKET = 61,
	ERR_BIND_SOCKET = 62,
	ERR_NON_BLOCK_MODE = 63,

	ERR_ANALOG_OUTPUT_CARD1 = 64,
	ERR_SERIAL_CARD2 = 65,
	ERR_RS_OPEN_IUFC = 66,
	ERR_RS_OPEN_ICP = 67,

	/* F-15K I/O BOARD */
	ERR_IOBOARD_1 = 68,
	ERR_IOBOARD_2 = 69,
	ERR_IOBOARD_3 = 70,
	ERR_IOBOARD_4 = 71,
	ERR_IOBOARD_5 = 72,
	ERR_IOBOARD_6 = 73,
	ERR_IOBOARD_7 = 74,
	ERR_IOBOARD_8 = 75,
	ERR_IOBOARD_9 = 76,
	ERR_IOBOARD_10 = 77,
	ERR_IOBOARD_11 = 78,
	ERR_IOBOARD_12 = 79,
	ERR_IOBOARD_13 = 80,
	ERR_IOBOARD_14 = 81,
	ERR_IOBOARD_15 = 82,
	ERR_IOBOARD_16 = 83,
	ERR_IOBOARD_17 = 84,
	ERR_IOBOARD_18 = 85,
	ERR_IOBOARD_19 = 86,
	ERR_IOBOARD_20 = 87,
	ERR_IOBOARD_21 = 88,
	ERR_IOBOARD_22 = 89,
	ERR_IOBOARD_23 = 90,
	ERR_IOBOARD_24 = 91,
	ERR_IOBOARD_25 = 92,
	ERR_IOBOARD_26 = 93,
	ERR_IOBOARD_27 = 94,
	ERR_IOBOARD_28 = 95,
	ERR_IOBOARD_29 = 96,
	ERR_IOBOARD_30 = 97,
	ERR_IOBOARD_31 = 98,
	ERR_IOBOARD_32 = 99,
	ERR_IOBOARD_33 = 100,
	ERR_IOBOARD_34 = 101,
	ERR_IOBOARD_35 = 102,
	ERR_IOBOARD_36 = 103,
	ERR_IOBOARD_37 = 104,
	ERR_IOBOARD_38 = 105,
	ERR_IOBOARD_39 = 106,
	ERR_IOBOARD_40 = 107,
	ERR_IOBOARD_41 = 108,
	ERR_IOBOARD_42 = 109,
	ERR_IOBOARD_43 = 110,
	ERR_IOBOARD_44 = 111,
	ERR_IOBOARD_45 = 112,
	ERR_IOBOARD_46 = 113,
	ERR_IOBOARD_47 = 114,
	ERR_IOBOARD_48 = 115,
	ERR_IOBOARD_49 = 116,
	ERR_IOBOARD_50 = 117,

	/* ETC */
	ERR_CONNECTION = 118,
	ERR_TOTAL_ERROR = 119,


}SYS_ERR;


typedef enum bool_type
{
	bFALSE = 0,
	bTRUE = 1
}bool_type;

typedef enum IOS_Mode_Enum
{
	IOS_NONE_MODE = 0,	/* Defaut Mode		*/
	IOS_PWR_MODE = 1,	/* Power Up		*/
	IOS_ORT_MODE = 2,	/* ORT		*/
	IOS_MTD_MODE = 3		/* MTD_Mode_Enum		*/
}IOS_Mode_Enum;


typedef struct SM_IOS_To_Cockpit
{
	int				Timetag;				// 증가값
	bool_type		System_Off;
	int				Volume_Control;			// Not used	
	bool_type		In_Out;					// Lamp 점검 (추후 논의), true 면 모든 lamp On
	bool_type		Resolution_Control;		// Not used
	IOS_Mode_Enum	IOS_Mode;				// Not used
	bool_type		Sub_SPT_Flag;			// Not used
}SM_IOS_To_Cockpit;



typedef struct SM_Cockpit_To_IOS
{
	int			Timetag;					// 증가값
	bool_type	Err_Status;					// Error 시 True
	int			Err_Codes[20];				// SYS_ERR 참조
	bool_type	CLS_ORT_Ready;				// Not used
}SM_Cockpit_To_IOS;